// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Question             string   `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

type Response struct {
	Answer               string   `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "api.Request")
	proto.RegisterType((*Response)(nil), "api.Response")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0xc8, 0xd4,
	0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x52,
	0xe5, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x00, 0x33, 0x32,
	0xf3, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x25, 0x2e, 0x8e, 0xa0,
	0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31, 0x2e, 0xb6, 0xc4, 0xbc, 0xe2, 0xf2, 0xd4,
	0x22, 0xa8, 0x2a, 0x28, 0xcf, 0xa8, 0x95, 0x91, 0x8b, 0xcd, 0x25, 0x33, 0x31, 0x27, 0x3f, 0x5d,
	0x48, 0x89, 0x8b, 0xd9, 0xb1, 0x38, 0x5b, 0x88, 0x47, 0x0f, 0x64, 0x1b, 0xd4, 0x7c, 0x29, 0x5e,
	0x28, 0x0f, 0x6a, 0x8c, 0x16, 0x17, 0xa7, 0x6f, 0x7e, 0x5e, 0x7e, 0x4e, 0x7e, 0x7a, 0x69, 0x2a,
	0x5e, 0x95, 0x06, 0x8c, 0x42, 0xda, 0x5c, 0x1c, 0x10, 0x93, 0x09, 0x28, 0xd5, 0x60, 0x34, 0x60,
	0x74, 0x12, 0x8a, 0x12, 0x48, 0x2f, 0x2a, 0x48, 0x0e, 0x49, 0x2d, 0x2e, 0x01, 0xf9, 0xd6, 0x3a,
	0xb1, 0x20, 0x33, 0x89, 0x0d, 0xec, 0x65, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x5a,
	0x46, 0x5c, 0x03, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DialogClient is the client API for Dialog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DialogClient interface {
	Ask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Monologue(ctx context.Context, in *Request, opts ...grpc.CallOption) (Dialog_MonologueClient, error)
	Dialogue(ctx context.Context, opts ...grpc.CallOption) (Dialog_DialogueClient, error)
}

type dialogClient struct {
	cc *grpc.ClientConn
}

func NewDialogClient(cc *grpc.ClientConn) DialogClient {
	return &dialogClient{cc}
}

func (c *dialogClient) Ask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Dialog/Ask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogClient) Monologue(ctx context.Context, in *Request, opts ...grpc.CallOption) (Dialog_MonologueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dialog_serviceDesc.Streams[0], "/api.Dialog/Monologue", opts...)
	if err != nil {
		return nil, err
	}
	x := &dialogMonologueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dialog_MonologueClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type dialogMonologueClient struct {
	grpc.ClientStream
}

func (x *dialogMonologueClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dialogClient) Dialogue(ctx context.Context, opts ...grpc.CallOption) (Dialog_DialogueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dialog_serviceDesc.Streams[1], "/api.Dialog/Dialogue", opts...)
	if err != nil {
		return nil, err
	}
	x := &dialogDialogueClient{stream}
	return x, nil
}

type Dialog_DialogueClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dialogDialogueClient struct {
	grpc.ClientStream
}

func (x *dialogDialogueClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dialogDialogueClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DialogServer is the server API for Dialog service.
type DialogServer interface {
	Ask(context.Context, *Request) (*Response, error)
	Monologue(*Request, Dialog_MonologueServer) error
	Dialogue(Dialog_DialogueServer) error
}

// UnimplementedDialogServer can be embedded to have forward compatible implementations.
type UnimplementedDialogServer struct {
}

func (*UnimplementedDialogServer) Ask(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (*UnimplementedDialogServer) Monologue(req *Request, srv Dialog_MonologueServer) error {
	return status.Errorf(codes.Unimplemented, "method Monologue not implemented")
}
func (*UnimplementedDialogServer) Dialogue(srv Dialog_DialogueServer) error {
	return status.Errorf(codes.Unimplemented, "method Dialogue not implemented")
}

func RegisterDialogServer(s *grpc.Server, srv DialogServer) {
	s.RegisterService(&_Dialog_serviceDesc, srv)
}

func _Dialog_Ask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServer).Ask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Dialog/Ask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServer).Ask(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dialog_Monologue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DialogServer).Monologue(m, &dialogMonologueServer{stream})
}

type Dialog_MonologueServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type dialogMonologueServer struct {
	grpc.ServerStream
}

func (x *dialogMonologueServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Dialog_Dialogue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DialogServer).Dialogue(&dialogDialogueServer{stream})
}

type Dialog_DialogueServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type dialogDialogueServer struct {
	grpc.ServerStream
}

func (x *dialogDialogueServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dialogDialogueServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dialog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Dialog",
	HandlerType: (*DialogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ask",
			Handler:    _Dialog_Ask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monologue",
			Handler:       _Dialog_Monologue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Dialogue",
			Handler:       _Dialog_Dialogue_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
